/*
 * Team : FreePascal
 * Created Time:  2011年08月16日 星期二 14时47分34秒
 * File Name: 8161005.cpp
 */
#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <algorithm>
#include <vector>
using namespace std;
#define SZ(v) ((int)(v).size())

typedef long long i64;
i64 pnumber (i64 N, i64 p)
{
    i64 ans = 0;
    while (N)
        ans += N/p, N/=p;
}

i64 fact(i64 N, i64 p)
{
    i64 a = N/p, b = N%p;
    
}

i64 extend_euc(i64 a, i64 b, i64 &x, i64 &y)
{
    long long d, t;
    if (b==0)   
        return x=1, y=0, a;
    else
        return d = extend_euc(b, a%b, x, y), t=x, x=y, y=t-a/b*x, d;
}

i64 divide(i64 a, i64 b, i64 p)
{
    long long x, y;
    extend_euc(b, p, x, y);
    x%=p;
    if (x<0) x+=p;
    return (a*x)%p;
}

void dowork(i64 N, i64 K, i64 P)
{  // (n+1)! / (k+1)! / (n-k)!
   i64 a = pnumber(N+1);
   i64 b = pnumber(K+1) + pnumber(N-K);
   if (a>b) {
       printf("%I64d\n", (N-K+P)%P);
       return;
   }
   
   
}

int main() {
    while (scanf("%d%d%d", &n, &k, &p)!=EOF)
        dowork(n, k, p);
    return 0;
}

